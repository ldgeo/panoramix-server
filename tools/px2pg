#! /usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from flask import Flask
import argparse
import glob
import yaml
import pyexifinfo

from pxserver.database import Database


def init_database(table):
    '''
    Create the metadatas table.
    '''
    sql = ('create table if not exists {0}('
           'id bigserial primary key'
           ', view bigserial'
           ', filename varchar'
           ', exif jsonb'
           ', etime timestamptz'
           ', type varchar'
           ', position geometry(point, 4326))'.
           format(table))
    Database.db.cursor().execute(sql)


def fill(table, type, metadatas):
    '''
    Fill the database with metadatas.
    '''
    for k, v in metadatas.items():
        lat, lng, alt = get_position(v)
        datetime = get_datetime(v)

        v['Composite:GPSLongitude'] = to_degrees(v['Composite:GPSLongitude'])
        v['EXIF:GPSLatitude'] = to_degrees(v['EXIF:GPSLatitude'])
        v['Composite:GPSPosition'] = to_degrees(v['Composite:GPSPosition'])
        v['Composite:GPSLatitude'] = to_degrees(v['Composite:GPSLatitude'])
        v['EXIF:GPSLongitude'] = to_degrees(v['EXIF:GPSLongitude'])

        v = str(v).replace('\'', '"')

        if type == 'equi':
            sql = ("INSERT INTO {0} VALUES(default, default, '{1}', '{2}', "
                   "'{3}', '{4}'"
                   ", ST_GeomFromText('POINT({5} {6})', 4326))"
                   .format(table, k, v, datetime, type, lng, lat, alt))
            Database.db.cursor().execute(sql)
        else:
            sql = ('SELECT view FROM {0} WHERE type = \'cube\' and '
                   'st_equals(position, st_geomfromtext(\'POINT({1} {2})\', '
                   '4326))'.format(table, lng, lat))
            viewid = Database.query_aslist(sql)

            if viewid:
                sql = ("INSERT INTO {0} VALUES(default, {7}, '{1}', '{2}',"
                       " '{3}', '{4}'"
                       ", ST_GeomFromText('POINT({5} {6})', 4326))"
                       .format(table, k, v, datetime, type, lng, lat,
                               viewid[0]))
                Database.db.cursor().execute(sql)
            else:
                sql = ("INSERT INTO {0} VALUES(default, default, '{1}', '{2}',"
                       " '{3}', '{4}'"
                       ", ST_GeomFromText('POINT({5} {6})', 4326))"
                       .format(table, k, v, datetime, type, lng, lat, alt))
                Database.db.cursor().execute(sql)


def to_degrees(dms_str):
    '''
    Convert a DMS string in decimal degrees.
    '''
    dms_str = dms_str.split(' ')
    d = float(dms_str[0])
    m = float(dms_str[2].replace('\'', ''))
    s = float(dms_str[3].replace('\"', ''))
    return float('{0:.8f}'.format(d + (m / 60.0) + (s / 3600.0)))


def get_position(metadata):
    '''
    Returns latitude, longitude and altitude from EXIF tags.
    '''
    lat = to_degrees(metadata['EXIF:GPSLatitude'])
    lng = to_degrees(metadata['EXIF:GPSLongitude'])
    alt = metadata['EXIF:GPSAltitude'].replace(' ', '').replace('m', '')
    return lat, lng, alt


def get_datetime(metadata):
    '''
    Returns a datetime from EXIF tags.
    '''
    date = metadata['EXIF:GPSDateStamp'].replace(':', '-')
    time = metadata['EXIF:GPSTimeStamp']
    return '{0} {1}'.format(date, time)


def get_metadatas(imagesdir, regex):
    '''
    Returns a list of metadata in json from tiff images.
    '''

    image_list = {}

    # recursive find
    if regex:
        pattern = '{0}/**/{1}.tif'.format(imagesdir, regex)
    else:
        pattern = '{0}/**/*.tif'.format(imagesdir)

    for filename in glob.glob(pattern):
        image_list[filename] = pyexifinfo.get_json(filename)[0]

    # first level find
    if regex:
        pattern = '{0}/{1}.tif'.format(imagesdir, regex)
    else:
        pattern = '{0}/*.tif'.format(imagesdir)

    for filename in glob.glob(pattern):
        image_list[filename] = pyexifinfo.get_json(filename)[0]

    return image_list


if __name__ == '__main__':
    # arg parse
    descr = 'Fill database with panoramics images metadatas'
    parser = argparse.ArgumentParser(description=descr)

    cfg_help = 'configuration file'
    parser.add_argument('cfg', metavar='cfg', type=str, help=cfg_help)

    type_help = 'image type (equi or cube)'
    parser.add_argument('type', metavar='type', type=str, help=type_help)

    dirh = 'directory with panoramics images'
    parser.add_argument('imagesdir', metavar='imagesdir', type=str, help=dirh)

    regh = 'regex for image filename <imagesdir>/**/<regex>.tif'
    parser.add_argument('--reg', metavar='reg', type=str, help=regh)

    args = parser.parse_args()

    # check if type is valid
    valid_types = ['cube', 'equi']
    if args.type not in valid_types:
        print('ERROR: invalid type. Should be in [{}]'
              .format(', '.join(valid_types)))
        sys.exit()

    # open config file
    ymlconf_db = None
    with open(args.cfg, 'r') as f:
        try:
            ymlconf_db = yaml.load(f)['flask']
        except:
            print("ERROR: ", sys.exc_info()[0])
            f.close()
            sys.exit()

    # database connection
    app = Flask(__name__)
    with app.app_context():
        app.config = ymlconf_db
        app.config['LOGGER_NAME'] = 'scan'
        Database.init_app(app)

        # init the database with table if not exist
        init_database(app.config['PG_TABLE'])

        # retrieve metadatas for each images
        metadatas = get_metadatas(args.imagesdir, args.reg)

        # fill database
        fill(app.config['PG_TABLE'], args.type, metadatas)
